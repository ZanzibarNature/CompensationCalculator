name: dev-pipeline

on:
  push:
    branches:
      - 'dev'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - name: Set up Python
      # This is the version of the action for setting up Python, not the Python version.
          uses: actions/setup-python@v4
          with:
      # Semantic version range syntax or exact version of a Python version
            python-version: '3.12.0'
      # You can test your matrix by printing the current Python version
        - name: Display Python version
          run: python -c "import sys; print(sys.version)"
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt 
        - name: Run tests
          run: |
            python -m pytest ./app/tests/unit
  docker:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.increment-patch-version.outputs.version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: Read current version
        id: read-version
        run: echo "::set-output name=version::$(cat version.txt)"
  
      - 
        name: Increment patch version
        id: increment-patch-version
        run: echo "::set-output name=version::$(echo ${{ steps.read-version.outputs.version }} | awk -F. '{$3=$3+1; print $0}' OFS=.)"
      
      - 
        name: Write new version
        run: echo "${{ steps.increment-patch-version.outputs.version }}" > version.txt

      - 
        name: Set variable
        id: set_var
        run: echo "version=${{ steps.increment-patch-version.outputs.version }}" >> $GITHUB_ENV

      - 
        name: Commit and push new version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.txt
          git commit -m "Increment patch version to ${{ steps.increment-patch-version.outputs.version }} [skip ci]"
          git push
      -
        name: Build and push Compensation Calculator
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            zanzibarinh/compensation-calculator:latest
            zanzibarinh/compensation-calculator:${{ steps.increment-patch-version.outputs.version }}
      # -
      #   name: Build and push Nginx
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./nginx
      #     push: true
      #     platforms: linux/amd64,linux/arm64
      #     tags: 
      #       zanzibarinh/compensation-nginx:latest
      #       zanzibarinh/compensation-nginx:${{ steps.increment-patch-version.outputs.version }}
  deploy:
    runs-on: ubuntu-latest
    # needs: docker
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up OpenShift CLI
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: kawa-foundation-app-dev

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy with Helm
        run: |
            helm upgrade --install compensation-calculator --set version=1.1.7 --set namespace="-dev" ./charts
            
            
